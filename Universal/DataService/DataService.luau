--// Data Service
return loadstring(base64.decode("LS0vLyBEZWJ1ZwpwcmludCgiW0RBVEEgU0VSVklDRV0gTG9hZGluZy4uLiIpCi0tLy8gRGF0YSBTZXJ2aWNlIE1vZHVsZQpsb2NhbCBNb2R1bGUgPSB7fQotLS8vIFZhcmlhYmxlcwpsb2NhbCByZXF1ZXN0ID0gcmVxdWVzdCBvciBodHRwX3JlcXVlc3Qgb3Igc3luLnJlcXVlc3QKbG9jYWwgSHR0cFNlcnZpY2UgPSBnYW1lOkdldFNlcnZpY2UoIkh0dHBTZXJ2aWNlIikKbG9jYWwgUGxheWVycyA9IGdhbWU6R2V0U2VydmljZSgiUGxheWVycyIpCmxvY2FsIFBsYXllciA9IFBsYXllcnMuTG9jYWxQbGF5ZXIKbG9jYWwgVXNlcklkID0gUGxheWVyLlVzZXJJZApsb2NhbCBOYW1lID0gUGxheWVyLk5hbWUKbG9jYWwgRGlzcGxheU5hbWUgPSBQbGF5ZXIuRGlzcGxheU5hbWUKbG9jYWwgcmVwb3MgPSAiYUhSMGNITTZMeTgyTjJZeVlUSXhaV1ZqTlRabFl6RmhNelprTTJJMk9HUXViVzlqYTJGd2FTNXBieTlEYUdGdmMwaDFZa1JoZEdGaVlYTmxMMFJoZEdGaVlYTmwiCgotLS8vIE1vZHVsaW5nCmZ1bmN0aW9uIE1vZHVsZTpnZW5lcmF0ZSh0YW1hbmhvKQogICAgbG9jYWwgY2FyYWN0ZXJlcyA9ICJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ekFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaMDEyMzQ1Njc4OSIKICAgIGxvY2FsIHJlc3VsdGFkbyA9ICIiCgogICAgZm9yIGkgPSAxLCB0YW1hbmhvIGRvCiAgICAgICAgbG9jYWwgaW5kaWNlID0gbWF0aC5yYW5kb20oMSwgI2NhcmFjdGVyZXMpCiAgICAgICAgcmVzdWx0YWRvID0gcmVzdWx0YWRvIC4uIGNhcmFjdGVyZXM6c3ViKGluZGljZSwgaW5kaWNlKQogICAgZW5kCgogICAgcmV0dXJuIHJlc3VsdGFkbwplbmQKZnVuY3Rpb24gTW9kdWxlOlBvc3RLZXkoS2V5KQogICAgbG9jYWwgYm9keSA9IHsKICAgICAgICBVc2VySWQgPSBiYXNlNjQuZW5jb2RlKHRvc3RyaW5nKFVzZXJJZCkpOwogICAgICAgIGtleSA9IGJhc2U2NC5lbmNvZGUoS2V5KTsKICAgIH0KICAgIAogICAgbG9jYWwgcmVzcG9uc2UgPSByZXF1ZXN0KHsKICAgICAgICBVcmwgPSBiYXNlNjQuZGVjb2RlKHJlcG9zKSwKICAgICAgICBNZXRob2QgPSAiUE9TVCIsCiAgICAgICAgSGVhZGVycyA9IHsKICAgICAgICAgICAgWyJDb250ZW50LVR5cGUiXSA9ICJhcHBsaWNhdGlvbi9qc29uIgogICAgICAgIH0sCiAgICAgICAgQm9keSA9IEh0dHBTZXJ2aWNlOkpTT05FbmNvZGUoYm9keSkKICAgIH0pCiAgICBsb2NhbCBkYXRhID0gSHR0cFNlcnZpY2U6SlNPTkRlY29kZShyZXNwb25zZS5Cb2R5KQplbmQKZnVuY3Rpb24gTW9kdWxlOkdldEtleSgpCiAgICBwcmludCgiW0RFQlVHXSBJbmljaWFuZG8gR2V0S2V5KCkiKQoKICAgIC0tIFJlcXVpc2nDp8OjbyBHRVQKICAgIGxvY2FsIHN1Y2Nlc3MsIHJlc3BvbnNlID0gcGNhbGwoZnVuY3Rpb24oKQogICAgICAgIHJldHVybiByZXF1ZXN0KHsKICAgICAgICAgICAgVXJsID0gYmFzZTY0LmRlY29kZShyZXBvcyksCiAgICAgICAgICAgIE1ldGhvZCA9ICJHRVQiCiAgICAgICAgfSkKICAgIGVuZCkKCiAgICBpZiBub3Qgc3VjY2VzcyB0aGVuCiAgICAgICAgd2FybigiW0VSUk9dIEZhbGhhIG5hIHJlcXVpc2nDp8OjbzoiLCByZXNwb25zZSkKICAgICAgICByZXR1cm4gbmlsCiAgICBlbmQKCiAgICBpZiBub3QgcmVzcG9uc2Ugb3Igbm90IHJlc3BvbnNlLkJvZHkgdGhlbgogICAgICAgIHdhcm4oIltFUlJPXSBSZXNwb3N0YSBvdSBCb2R5IGF1c2VudGUiKQogICAgICAgIHJldHVybiBuaWwKICAgIGVuZAoKICAgIHByaW50KCJbREVCVUddIFJlc3Bvc3RhIGJydXRhIHJlY2ViaWRhOiIpCiAgICBwcmludChyZXNwb25zZS5Cb2R5KQoKICAgIGxvY2FsIGRhdGEKICAgIGxvY2FsIHN1Y2Nlc3NEZWNvZGUsIGRlY29kZVJlc3VsdCA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICByZXR1cm4gSHR0cFNlcnZpY2U6SlNPTkRlY29kZShyZXNwb25zZS5Cb2R5KQogICAgZW5kKQoKICAgIGlmIG5vdCBzdWNjZXNzRGVjb2RlIHRoZW4KICAgICAgICB3YXJuKCJbRVJST10gRmFsaGEgYW8gZGVjb2RpZmljYXIgSlNPTjoiLCBkZWNvZGVSZXN1bHQpCiAgICAgICAgcmV0dXJuIG5pbAogICAgZW5kCgogICAgZGF0YSA9IGRlY29kZVJlc3VsdAoKICAgIGlmIHR5cGVvZihkYXRhKSB+PSAidGFibGUiIHRoZW4KICAgICAgICB3YXJuKCJbRVJST10gSlNPTiBkZWNvZGlmaWNhZG8gbsOjbyDDqSB1bWEgdGFiZWxhISIpCiAgICAgICAgcmV0dXJuIG5pbAogICAgZW5kCgogICAgcHJpbnQoIltERUJVR10gVG90YWwgZGUgcmVnaXN0cm9zOiIsICNkYXRhKQogICAgcHJpbnQoIltERUJVR10gUHJvY3VyYW5kbyBVc2VySWQ6IiwgVXNlcklkKQoKICAgIGxvY2FsIFJlc3VsdCA9IG5pbAoKICAgIGZvciBpLCB2IGluIGlwYWlycyhkYXRhKSBkbwogICAgICAgIHByaW50KHN0cmluZy5mb3JtYXQoIltERUJVR10gWyVkXSBSZWdpc3RybzogJXMiLCBpLCBIdHRwU2VydmljZTpKU09ORW5jb2RlKHYpKSkKCiAgICAgICAgbG9jYWwgZGVjb2RlZElkCiAgICAgICAgbG9jYWwgc3VjY2Vzc0lkLCBpZEVyciA9IHBjYWxsKGZ1bmN0aW9uKCkKICAgICAgICAgICAgZGVjb2RlZElkID0gdG9udW1iZXIoYmFzZTY0LmRlY29kZSh2LlVzZXJJZCkpCiAgICAgICAgZW5kKQoKICAgICAgICBpZiBub3Qgc3VjY2Vzc0lkIHRoZW4KICAgICAgICAgICAgd2FybihzdHJpbmcuZm9ybWF0KCJbRVJST10gRmFsaGEgYW8gZGVjb2RpZmljYXIgVXNlcklkIGRvIHJlZ2lzdHJvIFslZF06ICVzIiwgaSwgaWRFcnIpKQogICAgICAgIGVsc2UKICAgICAgICAgICAgcHJpbnQoc3RyaW5nLmZvcm1hdCgiW0RFQlVHXSBDb21wYXJhbmRvIElEOiAlZCA9PSAlZCIsIGRlY29kZWRJZCwgVXNlcklkKSkKICAgICAgICAgICAgaWYgZGVjb2RlZElkID09IFVzZXJJZCB0aGVuCiAgICAgICAgICAgICAgICBsb2NhbCBzdWNjZXNzS2V5LCBkZWNvZGVkS2V5ID0gcGNhbGwoZnVuY3Rpb24oKQogICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlNjQuZGVjb2RlKHYua2V5KQogICAgICAgICAgICAgICAgZW5kKQoKICAgICAgICAgICAgICAgIGlmIHN1Y2Nlc3NLZXkgdGhlbgogICAgICAgICAgICAgICAgICAgIFJlc3VsdCA9IGRlY29kZWRLZXkKICAgICAgICAgICAgICAgICAgICBwcmludCgiW1NVQ0VTU09dIENoYXZlIGVuY29udHJhZGEgcGFyYSBvIHVzdcOhcmlvOiIsIFJlc3VsdCkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHdhcm4oIltFUlJPXSBGYWxoYSBhbyBkZWNvZGlmaWNhciBrZXkhIikKICAgICAgICAgICAgICAgIGVuZAogICAgICAgICAgICBlbmQKICAgICAgICBlbmQKICAgIGVuZAoKICAgIGlmIG5vdCBSZXN1bHQgdGhlbgogICAgICAgIHdhcm4oIltJTkZPXSBOZW5odW1hIGNoYXZlIGNvcnJlc3BvbmRlbnRlIGFvIFVzZXJJZCBmb2kgZW5jb250cmFkYS4iKQogICAgZW5kCgogICAgcmV0dXJuIFJlc3VsdAplbmQKcHJpbnQoIltEQVRBIFNFUlZJQ0VdIEZ1bGx5IGxvYWRlZCIpCnJldHVybiBNb2R1bGUK"))()
